remarks file nmr/dg_sub_embed.inp -- 
remarks           Bound smoothing, (sub)structure embedding,
remarks           and regularization to produce a family of 
remarks           DG structures.  
remarks 
remarks Author: Axel T. Brunger
remarks Modifications for DMPfold by Shaun Kandathil, 2020 

set
   seed=__XPLORSEED__
end

eval ($numStructs = __NMODELS__) !total number of structures to calculate
eval ($randomSeed = __XPLORSEED__)     !random seed
eval ($use_graphics = false) ! VMD-xplor graphics are not used.

!
! get parallel info
!
cpyth "from os import environ as env"
cpyth "xplor.command('eval ($proc_num=%s)'  % env['XPLOR_PROCESS']      )"
cpyth "xplor.command('eval ($num_procs=%s)' % env['XPLOR_NUM_PROCESSES'])"
eval ($num_procs=min($num_procs,$numStructs))

! shouldn't have a process rank higher than $numprocs...
if ( $proc_num >= $num_procs ) then stop end if 

eval ($firstStruct = int($proc_num * $numStructs / $num_procs))
eval ($lastStruct  = int(($proc_num+1)  * $numStructs / $num_procs))


{====>} 
structure @input.psf end                             {*Read structure file.*}


parameter 
{====>}  
   @TOPPAR:protein.par
   nbonds 
      repel = 0.8                    {*This scales the van der Waals radii.*}
      rexp=2 irexp=2 rcon=1.
      nbxmod=3
      wmin=0.01
      cutnb=6.0 ctonnb=2.99 ctofnb=3.
      tolerance=1.5
   end 
end

topology 
   presidue NDIS                
      delete bond 1SG 2SG
      delete angle 1CB 1SG 2SG
      delete angle 1SG 2SG 2CB
   end
end

{===>}
               {*If protein contains S-S bridges, appropriately modify and *}
               {*then uncomment the following lines. The S-S covalent bonds*}
               {*will be deleted and reintroduced as fake NOE distances.   *}
!patch ndis reference=1=( residue 5  ) reference=2=( residue 55 ) end
!patch ndis reference=1=( residue 14 ) reference=2=( residue 38 ) end
!patch ndis reference=1=( residue 30 ) reference=2=( residue 51 ) end


noe
{====>} 
  nres=__NNOE__
                                      {*Approximate number greater than the*}
                                      {*actual number of NOEs.             *}
  class = all
! SMk added these
  potential * softsquare
  ceiling=1000
  asymptote * 1.0
  sqconstant * 1.0
  sqexponent * 2
  soexponent * 2
  rswitch * 0.25

{====>}        
   @contact.tbl                              {*Read NOE distance ranges.   *}
   @ssnoe.tbl                                {*Note that no other settings *}
   @hbond.tbl                                {*are important for embedding.*}
end


restraints dihedral
   nassign=__NDIH__
   @dihedral.tbl                          {*Read dihedral angle restraints.*}
end


{====>}
               {*If protein contains S-S bridges, appropriately modify and *}
               {*then uncomment the following lines.                       *}
!noe
!   assign (resid  5 and name sg) (resid 55 and name sg)  2.02 0.1 0.1 
!   assign (resid  14 and name sg) (resid 38 and name sg)  2.02 0.1 0.1 
!   assign (resid 30 and name sg) (resid 51 and name sg)  2.02 0.1 0.1 
!end


            {*Read template for pseudoatom correction and for target values*}
            {*for conformational constraints (bonds, angles, etc.).        *}
{===>} coor disp=refe @extended.pdb


{===>}
                                {*Store (sub)structure selection in store1.*}	
         {*The following substructure selection is typical for a protein;  *}
         {*for nucleic acids try name p or name c3' or name c5' or name c1'*}                             
         {*or name n9 or name n1 or name c2 or name c4 or name n3.         *}

vector ident ( store1 ) (name ca or name n or name hn or name c or name cb
                         or name o)  ! SMK

                                     {*Energy flags: both NOEs and dihedral*}
                                     {*angle restraints are included.      *}

flags exclude * include bond angle dihedral improper vdw noe cdih end

mmdg                                                {*Create bounds matrix.*}
   reference=coordinates 
   storebounds                                       {*Store bounds matrix.*}
end

                                      {*Include DG term for regularization.*}
flags exclude * include dg noe end 
constraints interaction=( recall1 ) ( recall1 ) end 

evaluate ($count = 0)

{*The following loop produces a family of __NMODELS__ substructures.*}     
{====>} 
!while ($count < $numStructs ) loop main

eval ($count = $firstStruct)
while ($count < $lastStruct) loop main

          
    eval ($seed = $randomSeed+$count)
    set seed $seed end

   evaluate ($embedded = false)

                                      {*Loop until embedding is successful;*}
                                      {*normally the success rate is high, *}
                                      {*and it will work during the first  *}
                                      {*pass.                              *}
   while ($embedded = false) loop embed
      mmdg
         recallbounds                                  {*Get bounds matrix.*}
         substructure=( recall1 ) 
         selection=( recall1 )                     {*Specify parameters    *}
                                                   {*for DG-regularization.*}
         scale=_MMDGSCALE_ 
         exponent=_MMDGEXP_                     

      end
   end loop embed
    
   vector do (x = x * $dgscale) (known)            {*Scale the structure;  *}
   vector do (y = y * $dgscale) (known)            {*the symbol $DGSCALE is*}
   vector do (z = z * $dgscale) (known)            {*defined by MMDG.      *}

   minimize powell                                        {*Regularization.*}
      nstep=10000 drop=10. nprint=25 
   end
    
{====>}          {*Uncomment the following lines if a test for the correct *}
                 {*enantiomer is desired based on improper energy.         *}
                 {*For this test to be successful, the substructures must  *}
                 {*contain chiral centers (e.g., CA) and all their ligands.*}

{* SMK This is something we could try for under-determined systems? *}

!flags exclude dg include impr end
!energy end
!evaluate ($old_e=$impr)
!vector do (x=-x) ( known )
!energy end
!if ($impr > $old_e) then
!  vector do (x=-x) ( known ) 
!end if
!flags exclude impr include dg end

{====>}          {* Uncomment the following lines if a test for the correct*}
                 {* enantiomer is desired based on an rms difference from a*}
                 {* reference structure.                                   *}
!coor disp=comp @reference.pdb                  {*Read reference structure.*}
!coor fit sele=( known ) end
!coor rms sele=( known ) end
!evaluate ($old_rms=$result) 
!vector do (x=-x) ( known ) 
!coor fit sele=( known ) end
!coor rms sele=( known ) end
!if ($result > $old_rms) then
!  vector do (x=-x) ( known )
!end if

    
{====>}                  {*Name(s) of the family of embedded substructures.*}
   evaluate ($filename="dg_sub_embed_"+encode($count)+".pdb")
    
   write coordinates output =$filename end
   evaluate ($count=$count+1)    
end loop main

stop
